0 reads processed...
10000 reads processed...
20000 reads processed...
30000 reads processed...
Gene-0 processed...
Gene-1 processed...
Gene-2 processed...
Gene-3 processed...
Gene-4 processed...
Gene-5 processed...
Gene-6 processed...
Gene-7 processed...
Gene-8 processed...
Gene-9 processed...
Hashing Finished!
Total kmers: 8641
Start iteration
[[ 0.08883133  0.07265843  0.09893556  0.11256613  0.12389942  0.0275338
   0.15935569  0.17358606  0.00501767  0.13761591]]


+++++0 iteration processed...
[[ 0.08883133  0.07265843  0.09893556  0.11256613  0.12389942  0.0275338
   0.15935569  0.17358606  0.00501767  0.13761591]]
Gene 0
[[ 2059332.28908415]]
Time: 1.283327572833123 s
Gene 1
[[ 654106.46918062]]
Time: 1.2009162402741822 s
Gene 2
[[ 1282438.23977833]]
Time: 1.310581538533384 s
Gene 3
[[ 655425.51099781]]
Time: 1.2708045789433555 s
Gene 4
[[ 757073.45940959]]
Time: 1.333852933018342 s
Gene 5
[[ 1310117.498336]]
Time: 1.6050652373441565 s
Gene 6
[[ 276539.80320184]]
Time: 1.6119106103795247 s
Gene 7
[[ 2241143.98881435]]
Time: 1.2644308228072703 s
Gene 8
[[ 1908086.62930267]]
Time: 1.3933785295251937 s
Gene 9
[[ 2377833.19237808]]
Time: 1.3128608491516154 s
Comparing Z...
[[ 0.08883133  0.07265843  0.09893556  0.11256613  0.12389942  0.0275338
   0.15935569  0.17358606  0.00501767  0.13761591]]
[[ 0.16358173  0.05593293  0.09434105  0.05131184  0.05575617  0.09959344
   0.02308023  0.16428878  0.12850686  0.16360698]]


+++++1 iteration processed...
[[ 0.16358173  0.05593293  0.09434105  0.05131184  0.05575617  0.09959344
   0.02308023  0.16428878  0.12850686  0.16360698]]
Gene 0
[[ 2059323.63078473]]
Time: 1.2578153565954935 s
Gene 1
[[ 654106.46914139]]
Time: 1.211431911528983 s
Gene 2
[[ 1282529.5801142]]
Time: 1.3180555630395006 s
Gene 3
[[ 655425.51164048]]
Time: 1.269166492825292 s
Gene 4
[[ 757075.03107955]]
Time: 1.2659118743538684 s
Gene 5
[[ 1310117.49833742]]
Time: 1.25360031263223 s
Gene 6
[[ 276539.80320184]]
Time: 1.3553217656330858 s
Gene 7
[[ 2241145.26238254]]
Time: 1.3168683098333176 s
Gene 8
[[ 1908063.46204571]]
Time: 1.2952196059202095 s
Gene 9
[[ 2378345.87130709]]
Time: 1.4468895993078164 s
Comparing Z...
[[ 0.16358173  0.05593293  0.09434105  0.05131184  0.05575617  0.09959344
   0.02308023  0.16428878  0.12850686  0.16360698]]
[[ 0.16358173  0.05593293  0.09434105  0.05131184  0.05575617  0.09959344
   0.02308023  0.16428878  0.12850686  0.16360698]]

Converged!

[[0.7068685160196518, 0.8479132258767138, 0.5658285534325458, 0.9939514224405781, 0.5662048611708576, 0.991640353675806], [0.6666665945772318, 0.666666575728526, 0.9999999359429406, 0.6666665959956564, 0.6666666079536362], [0.7013526934990403, 0.47191271694635434, 0.7193666299618945, 0.2235278498749517, 0.7024427213020802, 0.7103570250267353, 0.46805703837504786, 0.7074737747752572], [0.3331503165308801, 0.33322941558976404, 0.0, 3.6934037481473373e-16, 0.6664996566110458, 0.9997622284945578, 0.666380604949357, 0.33318369501308664, 0.3332332109008098], [0.990504513989185, 0.994494949284887, 0.9828551637472016, 0.3300741834322636, 1.23658599246424e-16, 0.33130330028472604, 0.33130330028472604, 0.33397095238593266], [0.9999890515867259, 0.9999903071163158, 0.499995543900296, 0.9999852691207377, 0.9999852691207377, 0.9999850730552218], [0.0, 4.863746396562921e-16, 0.9999993665065265, 0.0, 0.0, 0.9999991288683986, 0.9999990168873714], [0.7066956558030746, 0.2831785970335081, 0.9950064151006227, 0.5695678743104734, 0.2830207443873389, 0.9895725839422006, 0.9895725839422006, 0.28244444456468687], [0.7451368266138256, 0.4971533655507954, 0.49667443038298165, 0.9942752799046078, 0.4966552196400431, 0.4969727776505661, 0.9942985314682039, 0.744941903309404, 0.9945529930347484, 0.7451142765995777], [0.37593307582692, 0.5674823645968153, 0.7430706879834645, 0.3976142008890136, 0.7445564162731576, 0.7445564162731576, 0.7619242082942066, 0.7635552448647205, 0.7564198271726951, 0.7565446401083858]]

======Model Solution==================
Model's Psi
[0.7068685160196518, 0.8479132258767138, 0.5658285534325458, 0.9939514224405781, 0.5662048611708576, 0.991640353675806]
[0.6666665945772318, 0.666666575728526, 0.9999999359429406, 0.6666665959956564, 0.6666666079536362]
[0.7013526934990403, 0.47191271694635434, 0.7193666299618945, 0.2235278498749517, 0.7024427213020802, 0.7103570250267353, 0.46805703837504786, 0.7074737747752572]
[0.3331503165308801, 0.33322941558976404, 0.0, 3.6934037481473373e-16, 0.6664996566110458, 0.9997622284945578, 0.666380604949357, 0.33318369501308664, 0.3332332109008098]
[0.990504513989185, 0.994494949284887, 0.9828551637472016, 0.3300741834322636, 1.23658599246424e-16, 0.33130330028472604, 0.33130330028472604, 0.33397095238593266]
[0.9999890515867259, 0.9999903071163158, 0.499995543900296, 0.9999852691207377, 0.9999852691207377, 0.9999850730552218]
[0.0, 4.863746396562921e-16, 0.9999993665065265, 0.0, 0.0, 0.9999991288683986, 0.9999990168873714]
[0.7066956558030746, 0.2831785970335081, 0.9950064151006227, 0.5695678743104734, 0.2830207443873389, 0.9895725839422006, 0.9895725839422006, 0.28244444456468687]
[0.7451368266138256, 0.4971533655507954, 0.49667443038298165, 0.9942752799046078, 0.4966552196400431, 0.4969727776505661, 0.9942985314682039, 0.744941903309404, 0.9945529930347484, 0.7451142765995777]
[0.37593307582692, 0.5674823645968153, 0.7430706879834645, 0.3976142008890136, 0.7445564162731576, 0.7445564162731576, 0.7619242082942066, 0.7635552448647205, 0.7564198271726951, 0.7565446401083858]

======Ground Truth====================
Ground Truth's Psi
[0.7142857142857143, 0.8571428571428571, 0.5714285714285714, 1.0, 0.5714285714285714, 1.0]
[0.6666666666666666, 0.6666666666666666, 1.0, 0.6666666666666666, 0.6666666666666666]
[0.75, 0.5, 0.75, 0.25, 0.75, 0.75, 0.5, 0.75]
[0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 1.0, 0.6666666666666666, 0.3333333333333333, 0.3333333333333333]
[1.0, 1.0, 1.0, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
[1.0, 1.0, 0.5, 1.0, 1.0, 1.0]
[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0]
[0.7142857142857143, 0.2857142857142857, 1.0, 0.5714285714285714, 0.2857142857142857, 1.0, 1.0, 0.2857142857142857]
[0.75, 0.5, 0.5, 1.0, 0.5, 0.5, 1.0, 0.75, 1.0, 0.75]
[0.5, 0.75, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

======Evaluation============
RMSE:
0.0805519165476
Time: 44.520905227326786s
Wrote profile results to SolverPipeline.py.lprof
Timer unit: 2.56592e-07 s

Total time: 1.06292 s
File: E:\Github\PSIEstimation\proj\src\EMAlgorithm.py
Function: __init__ at line 9

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     9                                               @profile
    10                                               def __init__(self, kmerHasher):
    11         1            7      7.0      0.0          self.EPS = 1e-30
    12         1            5      5.0      0.0          self.NG = kmerHasher.NG
    13         1            4      4.0      0.0          self.NE = kmerHasher.NE
    14         1            7      7.0      0.0          self.K = kmerHasher.K
    15         1            3      3.0      0.0          self.NW = kmerHasher.NW
    16         1            3      3.0      0.0          self.readLength = kmerHasher.readLength
    17                                                   
    18         1         5580   5580.0      0.1          self.initialIndice()
    19         1      4090817 4090817.0     98.8          self.initialCoefficients(kmerHasher)
    20         1        46038  46038.0      1.1          self.initialConstraints()

Total time: 0.000841623 s
File: E:\Github\PSIEstimation\proj\src\EMAlgorithm.py
Function: initialIndice at line 22

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    22                                               @profile
    23                                               def initialIndice(self):
    24         1            7      7.0      0.2          self.NX = []
    25        11           27      2.5      0.8          for g in range(self.NG):
    26        10           46      4.6      1.4              self.NX.append(int(self.NE[g] * (self.NE[g] + 1) / 2))
    27                                                       
    28         1            5      5.0      0.2          self.NXSUM = [0]
    29        11           21      1.9      0.6          for g in range(self.NG):
    30        10           32      3.2      1.0              self.NXSUM.append(self.NX[g] + self.NXSUM[g])
    31                                                       
    32         1            4      4.0      0.1          self.MergeIdx = {}
    33         1            3      3.0      0.1          self.SplitIdx = []
    34         1            2      2.0      0.1          idx = 0
    35        11           19      1.7      0.6          for g in range(self.NG):
    36        87          151      1.7      4.6              for e in range(self.NE[g]):
    37        77          166      2.2      5.1                  self.SplitIdx.append((g,e,e))
    38        77          169      2.2      5.2                  self.MergeIdx[(g,e,e)] = idx
    39        77          127      1.6      3.9                  idx += 1
    40        87          144      1.7      4.4              for ei in range(self.NE[g]):
    41       348          643      1.8     19.6                  for ej in range(ei + 1, self.NE[g]):
    42       271          726      2.7     22.1                      self.SplitIdx.append((g,ei,ej))
    43       271          564      2.1     17.2                      self.MergeIdx[(g,ei,ej)] = idx
    44       271          424      1.6     12.9                      idx += 1        

Total time: 0.769674 s
File: E:\Github\PSIEstimation\proj\src\EMAlgorithm.py
Function: initialCoefficients at line 46

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    46                                               @profile
    47                                               def initialCoefficients(self, kmerHasher):
    48         1            5      5.0      0.0          self.L = []
    49        11           26      2.4      0.0          for g in range(self.NG):
    50        10          103     10.3      0.0              self.L.append(np.zeros((1, self.NX[g])))
    51        11           26      2.4      0.0          for g in range(self.NG):
    52        10           24      2.4      0.0              col = 0
    53        87          208      2.4      0.0              for e in range(self.NE[g]):
    54        77          221      2.9      0.0                  st = kmerHasher.geneBoundary[g][e][0]
    55        77          216      2.8      0.0                  ed = kmerHasher.geneBoundary[g][e][1] + 1
    56        77          291      3.8      0.0                  self.L[g][0, col] = ed - st - self.readLength + 1
    57        77          179      2.3      0.0                  col += 1
    58        87          203      2.3      0.0              for ei in range(self.NE[g]):
    59        77          173      2.2      0.0                  ej = ei + 1
    60       348          882      2.5      0.0                  while ej < self.NE[g]:
    61       271         1026      3.8      0.0                      self.L[g][0, col] = 2 * self.readLength - 2 - self.readLength + 1
    62       271          618      2.3      0.0                      ej += 1
    63       271          648      2.4      0.0                      col += 1
    64                                                   
    65                                                   #self.Tau = spa.lil_matrix((self.NW, self.NXSUM[self.NG]))
    66         1            8      8.0      0.0          self.Tau = []
    67        11           74      6.7      0.0          for g in range(self.NG):
    68        10       484545  48454.5     16.2              self.Tau.append(spa.lil_matrix((self.NW, self.NX[g])))
    69                                                       
    70                                                       
    71         1          125    125.0      0.0          self.W = np.zeros((1, self.NW))
    72         1            4      4.0      0.0          self.MuNonZero = []
    73         1            2      2.0      0.0          row = 0
    74      8642        24364      2.8      0.8          for kmer in kmerHasher.kmerTable:
    75      8641        47679      5.5      1.6              self.W[0, row] = kmerHasher.kmerTable[kmer][0]
    76      8641        26278      3.0      0.9              contribution = kmerHasher.kmerTable[kmer][1]
    77                                                       
    78      8641        26625      3.1      0.9              gSet = {}
    79     47117       122196      2.6      4.1              for loc in contribution:
    80     38476       143048      3.7      4.8                  sub = loc.split(',')
    81     38476       134985      3.5      4.5                  g = int(sub[0])
    82     38476       121782      3.2      4.1                  ei = int(sub[1])
    83     38476       117955      3.1      3.9                  ej = int(sub[2])
    84     38476       119367      3.1      4.0                  col = self.MergeIdx[(g, ei, ej)]
    85                                                           
    86                                                           #self.Tau[row, col] = contribution[loc]
    87     38476       109322      2.8      3.6                  col = col - self.NXSUM[g]
    88     38476      1315300     34.2     43.8                  self.Tau[g][row, col] = contribution[loc]
    89                                                           
    90     38476       103611      2.7      3.5                  gSet[g] = True
    91                                                           
    92     17282        45625      2.6      1.5              for g in gSet:
    93      8641        29167      3.4      1.0                  self.MuNonZero.append((row, g))
    94      8641        22685      2.6      0.8              row += 1

Total time: 0.0066283 s
File: E:\Github\PSIEstimation\proj\src\EMAlgorithm.py
Function: initialConstraints at line 96

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    96                                               @profile
    97                                               def initialConstraints(self):
    98         1            7      7.0      0.0          self.NA = []
    99        11           31      2.8      0.1          for g in range(self.NG):
   100        10           22      2.2      0.1              if self.NE[g] > 2:
   101        10           31      3.1      0.1                  self.NA.append(3 * self.NE[g] - 4)
   102                                                       else:
   103                                                           self.NA.append(self.NE[g])
   104                                                       
   105         1            3      3.0      0.0          self.A = []
   106        11           23      2.1      0.1          for g in range(self.NG):
   107        10          123     12.3      0.5              self.A.append(np.zeros((self.NA[g], self.NX[g])))
   108        11           38      3.5      0.1          for g in range(self.NG):
   109        10           28      2.8      0.1              if self.NA[g] == 1:
   110                                                           self.A[g][0, 0] = 1
   111                                                           break
   112                                                       
   113        10           20      2.0      0.1              row = 0
   114                                                       
   115        10           27      2.7      0.1              NRightJunc = self.NE[g] - 1
   116        10           22      2.2      0.1              l = self.NE[g]
   117        10           28      2.8      0.1              r = l + self.NE[g] - 1
   118        77          198      2.6      0.8              while row < NRightJunc:
   119        67          205      3.1      0.8                  self.A[g][row, row] = 1
   120       338          770      2.3      3.0                  for i in range(l, r):
   121       271          779      2.9      3.0                      self.A[g][row, i] = -1
   122        67          135      2.0      0.5                  l = r
   123        67          172      2.6      0.7                  r = r + self.NE[g] - (row + 2)
   124        67          140      2.1      0.5                  row += 1
   125                                                       
   126        10           22      2.2      0.1              NLeftJunc = NRightJunc + self.NE[g] - 1
   127        77          170      2.2      0.7              while row < NLeftJunc:
   128        67          214      3.2      0.8                  self.A[g][row, row - NRightJunc + 1] = 1
   129        67          148      2.2      0.6                  l = self.NE[g]
   130        67          144      2.1      0.6                  r = row - NRightJunc
   131        67          132      2.0      0.5                  i = 1
   132       338          719      2.1      2.8                  while r >= 0:
   133       271          802      3.0      3.1                      self.A[g][row, l + r] = -1
   134       271          675      2.5      2.6                      l += self.NE[g] - i
   135       271          559      2.1      2.2                      i += 1
   136       271          583      2.2      2.3                      r -= 1     
   137        67          139      2.1      0.5                  row += 1                
   138                                                       
   139        10           28      2.8      0.1              NPsi = NLeftJunc + self.NE[g] - 2
   140        67          143      2.1      0.6              while row < NPsi:
   141      2253         4642      2.1     18.0                  for i in range(self.NX[g]):
   142      2196         5450      2.5     21.1                      if i >= self.NE[g]:
   143      1731         4840      2.8     18.7                          self.A[g][row, i] = -1 
   144       465         1093      2.4      4.2                      elif i != row - NLeftJunc + 1:
   145       408         1183      2.9      4.6                          self.A[g][row, i] = 1
   146        57          125      2.2      0.5                  row += 1                
   147                                                           
   148        10         1219    121.9      4.7              self.A[g] = self.A[g] / (np.ones((self.NA[g], 1)).dot(self.L[g]))

Total time: 0.00567813 s
File: E:\Github\PSIEstimation\proj\src\EMAlgorithm.py
Function: initialX at line 150

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   150                                               @profile
   151                                               def initialX(self, g):
   152        30         1096     36.5      5.0          ret = np.random.rand(1, self.NX[g])
   153       261          690      2.6      3.1          for e in range(self.NE[g]):
   154       231         1050      4.5      4.7              ret[0, e] *= 100
   155        30           51      1.7      0.2          tot = 0.0
   156      1074         1924      1.8      8.7          for e in range(self.NX[g]):
   157      1044         2824      2.7     12.8              tot += ret[0, e]
   158      1074         1919      1.8      8.7          for e in range(self.NX[g]):
   159      1044         3240      3.1     14.6              ret[0, e] /= tot
   160                                                           
   161        42         3510     83.6     15.9          while not (self.A[g].dot(ret.T) > -self.EPS).all():
   162        12          185     15.4      0.8              ret = np.random.rand(1, self.NX[g])
   163       116          247      2.1      1.1              for e in range(self.NE[g]):
   164       104          390      3.8      1.8                  ret[0, e] *= 100
   165        12           22      1.8      0.1              tot = 0.0
   166       518          919      1.8      4.2              for e in range(self.NX[g]):
   167       506         1418      2.8      6.4                  tot += ret[0, e]
   168       518          959      1.9      4.3              for e in range(self.NX[g]):
   169       506         1611      3.2      7.3                  ret[0, e] /= tot
   170        30           74      2.5      0.3          return ret

Total time: 0.00222979 s
File: E:\Github\PSIEstimation\proj\src\EMAlgorithm.py
Function: initialVariables at line 172

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   172                                               @profile
   173                                               def initialVariables(self):
   174         1           61     61.0      0.7          self.Z = np.random.rand(1, self.NG)
   175         1            2      2.0      0.0          tot = 0.0
   176        11           21      1.9      0.2          for g in range(self.NG):
   177        10           35      3.5      0.4              tot += self.Z[0, g]
   178        11           20      1.8      0.2          for g in range(self.NG):
   179        10           39      3.9      0.4              self.Z[0, g] /= tot
   180                                                   
   181         1            3      3.0      0.0          self.X = []
   182        11           21      1.9      0.2          for g in range(self.NG):
   183        10         8486    848.6     97.7              self.X.append(self.initialX(g))
   184                                           
   185                                                   #self.Mu = spa.lil_matrix((self.NW, self.NG))
   186         1            2      2.0      0.0          return

Total time: 0.957743 s
File: E:\Github\PSIEstimation\proj\src\EMAlgorithm.py
Function: eStep at line 188

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   188                                               @profile
   189                                               def eStep(self):
   190                                                   #=======================================================================
   191                                                   # tot = []
   192                                                   # for s in range(self.NW):
   193                                                   #     tot.append(0)
   194                                                   # for loca in self.MuNonZero:
   195                                                   #     s = loca[0]
   196                                                   #     g = loca[1]
   197                                                   #     #self.Mu[s, g] = self.Z[0, g] * self.Tau[s, self.NXSUM[g]:self.NXSUM[g+1]].dot(self.X[g].T)[0, 0]
   198                                                   #     self.Mu[s, g] = self.Z[0, g] * self.Tau[g][s,].dot(self.X[g].T)[0, 0]
   199                                                   #     
   200                                                   #     tot[s] += self.Mu[s, g]
   201                                                   # for loca in self.MuNonZero:
   202                                                   #     s = loca[0]
   203                                                   #     g = loca[1]
   204                                                   #     self.Mu[s, g] /= tot[s]
   205                                                   #=======================================================================
   206         2        15822   7911.0      0.4          self.Mu = []
   207         2          234    117.0      0.0          tot = np.zeros((self.NW, 1))
   208        22           81      3.7      0.0          for g in range(self.NG):
   209        20      1008272  50413.6     27.0              self.Mu.append(np.multiply(self.Tau[g].dot(self.X[g].T), self.Z[0, g]))
   210        20          940     47.0      0.0              tot += self.Mu[g]        
   211        22          248     11.3      0.0          for g in range(self.NG):
   212        20      2700773 135038.6     72.4              self.Mu[g] = spa.lil_matrix(np.divide(self.Mu[g], tot))            
   213                                                       
   214         2         6167   3083.5      0.2          print(self.Z)
   215         2            8      4.0      0.0          return

Total time: 26.8396 s
File: E:\Github\PSIEstimation\proj\src\EMAlgorithm.py
Function: mStep at line 217

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   217                                               @profile
   218                                               def mStep(self, t):
   219         2            6      3.0      0.0          tot = 0.0
   220        22           62      2.8      0.0          for g in range(self.NG):
   221        20      1019457  50972.8      1.0              self.Z[0, g] = self.Mu[g].T.dot(self.W.T)
   222        20          367     18.4      0.0              tot += self.Z[0, g]
   223        22           43      2.0      0.0          for g in range(self.NG):
   224        20           61      3.0      0.0              self.Z[0, g] /= tot
   225                                            
   226        22           51      2.3      0.0          for g in range(self.NG):
   227        20    103580152 5179007.6     99.0              self.optimizeQ(g, t)
   228         2            3      1.5      0.0          return

Total time: 26.5768 s
File: E:\Github\PSIEstimation\proj\src\EMAlgorithm.py
Function: optimizeQ at line 230

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   230                                               @profile
   231                                               def optimizeQ(self, g, t):
   232        20          171      8.6      0.0          timeSt = time.clock() 
   233                                                   
   234        20          329     16.4      0.0          glopt = float('inf')
   235                                                   
   236        20        26632   1331.6      0.0          xInit = self.initialX(g)
   237                                                   #xInit = self.X[g].copy()
   238        20          505     25.2      0.0          print('Gene ' + str(g))
   239                                                   #print(self.A[g].dot(self.X[g].T))
   240                                                   #===================================================================
   241                                                   # print((self.A[g].dot(self.X[g].T) >= 0).all())
   242                                                   # print(np.ones((1, self.NX[g])).dot(self.X[g].T))
   243                                                   #===================================================================
   244        20          180      9.0      0.0          res = opt.minimize(fun = self.QFunction,
   245        20          106      5.3      0.0                             x0 = xInit,
   246        20          113      5.7      0.0                             args = (g,),
   247        20          108      5.4      0.0                             tol = self.EPS, 
   248        20          699     35.0      0.0                             bounds = [(0, 1) for i in range(self.NX[g])],
   249        20          111      5.5      0.0                             method = 'SLSQP',
   250        20          119      6.0      0.0                             jac = self.QDerivate,
   251        20          124      6.2      0.0                             constraints = ({'type':'ineq',
   252        20          138      6.9      0.0                                             'fun':lambda X: self.A[g].dot(X.T),
   253        20          118      5.9      0.0                                             'jac':lambda X: self.A[g]},
   254        20          120      6.0      0.0                                            {'type':'eq', 
   255        20          120      6.0      0.0                                             'fun':lambda X: np.ones((1, self.NX[g])).dot(X.T) - 1,
   256        20          124      6.2      0.0                                             'jac':lambda X: np.ones((1, self.NX[g]))}),
   257        20          110      5.5      0.0                             options = {#'eps' : 1000,
   258        20          113      5.7      0.0                                        'maxiter' : t,
   259        20    103510951 5175547.5     99.9                                        'ftol' : self.EPS,
   260                                                                                 #'disp' : True
   261                                                                                 }
   262                                                                  )
   263                                           
   264                                                   #===================================================================
   265                                                   # res = opt.fmin_slsqp(func = self.QFunction, 
   266                                                   #                      x0 = xInit, 
   267                                                   #                      f_eqcons = lambda X, g: np.ones((1, self.NX[g])).dot(X.T) - 1, 
   268                                                   #                      f_ieqcons = lambda X, g: self.A[g].dot(X.T), 
   269                                                   #                      bounds = [(0, 1) for i in range(self.NX[g])], 
   270                                                   #                      fprime = self.QDerivate, 
   271                                                   #                      fprime_eqcons = lambda X, g: np.ones((1, self.NX[g])), 
   272                                                   #                      fprime_ieqcons = lambda X, g: self.A[g], 
   273                                                   #                      args = (g,), 
   274                                                   #                      iter = 100,
   275                                                   #                      acc = self.EPS, 
   276                                                   #                      disp = False, 
   277                                                   #                      full_output = True, 
   278                                                   #                      epsilon = self.EPS)
   279                                                   #===================================================================            
   280                                           
   281                                                   #=======================================================================
   282                                                   #     print(res.fun)
   283                                                   #     if res.fun[0, 0] < glopt:
   284                                                   #         finres = res
   285                                                   #         glopt = res.fun[0, 0]
   286                                                   # print(finres)
   287                                                   #=======================================================================
   288        20        32056   1602.8      0.0          print(res.fun)
   289        20         1998     99.9      0.0          self.X[g] = np.matrix(res.x)               
   290                                                   
   291                                                   #=======================================================================
   292                                                   #     print(res[1])
   293                                                   #     if res[1][0, 0] < glopt:
   294                                                   #         finres = res
   295                                                   #         glopt = res[1][0, 0]
   296                                                   # print(finres)
   297                                                   # self.X[g] = np.matrix(finres[0])
   298                                                   #=======================================================================
   299        20          665     33.2      0.0          print('Time: ' + str(time.clock() - timeSt) + ' s')
   300        20          152      7.6      0.0          return

Total time: 0.978342 s
File: E:\Github\PSIEstimation\proj\src\EMAlgorithm.py
Function: offlineProcess at line 302

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   302                                               @profile 
   303                                               def offlineProcess(self):
   304         2        18468   9234.0      0.5          self.coef = []
   305        22          179      8.1      0.0          for g in range(self.NG):
   306        20      3794175 189708.8     99.5              self.coef.append(spa.lil_matrix(self.Mu[g].multiply(self.W.T)))
   307         2            3      1.5      0.0          return

Total time: 12.6983 s
File: E:\Github\PSIEstimation\proj\src\EMAlgorithm.py
Function: QFunction at line 309

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   309                                               @profile 
   310                                               def QFunction(self, X, g):
   311       485        38322     79.0      0.1          X = np.matrix(X)
   312                                                   #temp = self.Tau[:,self.NXSUM[g]:self.NXSUM[g+1]].dot(X.T)
   313       485     24497403  50510.1     49.5          temp = self.Tau[g].dot(X.T)
   314                                                   
   315                                                   #=======================================================================
   316                                                   # if not (not (self.Mu[:g] > self.EPS) or temp > self.EPS).all():
   317                                                   #     return np.matrix(float('inf'))
   318                                                   #=======================================================================
   319                                                   #return -self.Mu[:,g].multiply(np.log(temp)).T.dot(self.W.T)
   320       485     24952442  51448.3     50.4          return -self.coef[g].T.dot(np.log(temp))

Total time: 13.6028 s
File: E:\Github\PSIEstimation\proj\src\EMAlgorithm.py
Function: QDerivate at line 322

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   322                                               @profile
   323                                               def QDerivate(self, X, g):
   324       419        31788     75.9      0.1          X = np.matrix(X)
   325                                                   
   326                                                   #=======================================================================
   327                                                   # den = (self.Tau[:,self.NXSUM[g]:self.NXSUM[g+1]].dot(X.T)).dot(np.ones((1, self.NX[g])))
   328                                                   # den = self.Tau[:,self.NXSUM[g]:self.NXSUM[g+1]] / den
   329                                                   # num = (spa.lil_matrix(self.Mu[:,g].dot(np.ones((1, self.NX[g]))))).multiply(den)
   330                                                   # jac = self.W.dot(num)
   331                                                   #=======================================================================
   332                                                   
   333                                                   #coef = self.Mu[:,g].multiply(self.W.T)
   334                                                   #denom = self.Tau[:, self.NXSUM[g]:self.NXSUM[g+1]].dot(X.T)
   335       419     21388724  51047.1     40.3          denom = self.Tau[g].dot(X.T)
   336                                                   #temp = np.divide(coef, denom)
   337       419      8394933  20035.6     15.8          temp = np.divide(self.coef[g].todense(), denom)
   338                                                   #jac = self.Tau[:, self.NXSUM[g]:self.NXSUM[g+1]].T.dot(temp).T
   339       419     23111334  55158.3     43.6          jac = self.Tau[g].T.dot(temp).T
   340                                                   
   341       419        72774    173.7      0.1          jac /= np.sum(jac)
   342       419        13788     32.9      0.0          return -jac.A1

Total time: 28.7852 s
File: E:\Github\PSIEstimation\proj\src\EMAlgorithm.py
Function: work at line 364

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   364                                               @profile
   365                                               def work(self, time):
   366         1         8816   8816.0      0.0          self.initialVariables()
   367                                                           
   368                                                   #=======================================================================
   369                                                   # res = self.optimizeLikelihood()        
   370                                                   # print(res)
   371                                                   # self.X[0] = np.matrix(res.x)
   372                                                   #=======================================================================
   373         1           22     22.0      0.0          prevZ = self.Z.copy()
   374         1         2932   2932.0      0.0          print(self.Z)
   375         1            4      4.0      0.0          proc = 0
   376         2            6      3.0      0.0          while proc < time:
   377         2            6      3.0      0.0              if proc % 1 == 0:
   378         2           38     19.0      0.0                  print('\n\n+++++' + str(proc) + ' iteration processed...')
   379         2            6      3.0      0.0              proc += 1
   380         2      3732958 1866479.0      3.3              self.eStep()
   381         2      3813132 1906566.0      3.4              self.offlineProcess()
   382         2    104600597 52300298.5     93.2              self.mStep(20)
   383         2           15      7.5      0.0              print('Comparing Z...')
   384         2         4694   2347.0      0.0              print(prevZ)
   385         2         4531   2265.5      0.0              print(self.Z)
   386         2          102     51.0      0.0              if (np.fabs(self.Z-prevZ) < 1e-5).all():
   387         1           14     14.0      0.0                  print('\nConverged!\n')
   388         1            2      2.0      0.0                  break 
   389                                                       else:
   390         1            9      9.0      0.0                  prevZ = self.Z.copy()
   391                                                   #self.mStep(20)
   392         1        14582  14582.0      0.0          self.computePSI()
   393         1            3      3.0      0.0          return

Total time: 0.00251768 s
File: E:\Github\PSIEstimation\proj\src\EMAlgorithm.py
Function: computePSI at line 395

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   395                                               @profile 
   396                                               def computePSI(self):
   397         1            4      4.0      0.0          self.Psi = []
   398        11           27      2.5      0.3          for g in range(self.NG):
   399        10          211     21.1      2.2              tempPsi = self.X[g] / self.L[g]
   400        10           21      2.1      0.2              sumEx = 0.0
   401        10           19      1.9      0.2              sumJu = 0.0
   402        10           16      1.6      0.2              e = 0
   403        87          196      2.3      2.0              while e < self.NE[g]:
   404        77          900     11.7      9.2                  sumEx += tempPsi[0, e]
   405        77          159      2.1      1.6                  e += 1
   406       281          714      2.5      7.3              while e < self.NX[g]:
   407       271         2733     10.1     27.9                  sumJu += tempPsi[0, e]
   408       271          539      2.0      5.5                  e += 1
   409        10          100     10.0      1.0              tempPsi /= (sumEx - sumJu)
   410        10          494     49.4      5.0              self.Psi.append(tempPsi[0,:self.NE[g]].A1.tolist())
   411         1          311    311.0      3.2          print(self.Psi)
   412         1          858    858.0      8.7          psiFile = open('../output/PsiResult.json', 'w')
   413         1         2507   2507.0     25.6          json.dump(self.Psi, psiFile)
   414                                           
   415         1            3      3.0      0.0          return

Total time: 14.6712 s
File: E:\Github\PSIEstimation\proj\src\KmerHash.py
Function: __init__ at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                               @profile
     5                                               def __init__(self, K, readLength, genomeFile, exonBoundaryFile, readsFile):
     6         1            4      4.0      0.0          self.K = K
     7         1            2      2.0      0.0          self.readLength = readLength
     8         1            2      2.0      0.0          self.kmerTable = {}
     9         1            4      4.0      0.0          self.geneBoundary = []
    10         1     47624443 47624443.0     83.3          self.readReads(readsFile)
    11         1      5000065 5000065.0      8.7          self.readGenome(genomeFile, exonBoundaryFile)
    12         1       736201 736201.0      1.3          self.mergeKmer()
    13         1      3816140 3816140.0      6.7          json.dump(self.kmerTable, open('../output/kmerTable.json', 'w'))

Total time: 6.9422 s
File: E:\Github\PSIEstimation\proj\src\KmerHash.py
Function: readReads at line 15

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    15                                               @profile
    16                                               def readReads(self, readsFile):
    17         1          428    428.0      0.0          fileIn = open(readsFile, 'r')
    18         1            3      3.0      0.0          proc = 0
    19     39602       189767      4.8      0.7          for line in fileIn:
    20     39601        85766      2.2      0.3              if proc % 10000 == 0:
    21         4          347     86.8      0.0                  print(str(proc) + ' reads processed...')
    22     39601        74198      1.9      0.3              proc += 1
    23     39601        89233      2.3      0.3              read = line[:-1]
    24     39601        69386      1.8      0.3              st = 0
    25   2455262      5254796      2.1     19.4              while st + self.K <= self.readLength:
    26   2415661      5939490      2.5     22.0                  kmer = read[st:st+self.K]
    27   2415661      5073528      2.1     18.8                  if kmer in self.kmerTable:
    28   2401750      5753354      2.4     21.3                      self.kmerTable[kmer] += 1
    29                                                           else:
    30     13911        31654      2.3      0.1                      self.kmerTable[kmer] = 1
    31   2415661      4382483      1.8     16.2                  st += 1
    32         1           16     16.0      0.0          self.NW = len(self.kmerTable)
    33     13912        39066      2.8      0.1          for kmer in self.kmerTable:
    34     13911        33109      2.4      0.1              val = self.kmerTable[kmer]
    35     13911        38713      2.8      0.1              self.kmerTable[kmer] = (val, {})
    36         1            3      3.0      0.0          return

Total time: 0.782725 s
File: E:\Github\PSIEstimation\proj\src\KmerHash.py
Function: readGenome at line 38

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    38                                               @profile
    39                                               def readGenome(self, genomeFile, exonBoundaryFile):
    40         1         1946   1946.0      0.1          exonBoundaryIn = open(exonBoundaryFile,'r')
    41         1            5      5.0      0.0          COL_EXONNUM = 1
    42         1            3      3.0      0.0          COL_EXONST = 2
    43         1            3      3.0      0.0          COL_EXONED = 3
    44        11          162     14.7      0.0          for line in exonBoundaryIn:
    45        10           70      7.0      0.0              sub = line[:-1].split('\t')
    46        10           40      4.0      0.0              self.geneBoundary.append([])
    47        10           54      5.4      0.0              subst = sub[COL_EXONST].split(',')
    48        10           48      4.8      0.0              subed = sub[COL_EXONED].split(',')
    49        10           27      2.7      0.0              e = 0
    50        87          371      4.3      0.0              while e < int(sub[COL_EXONNUM]):
    51        77          382      5.0      0.0                  self.geneBoundary[-1].append((int(subst[e]), int(subed[e])))
    52        77          278      3.6      0.0                  e += 1
    53         1          206    206.0      0.0          exonBoundaryIn.close()
    54                                                   
    55         1            9      9.0      0.0          self.NG = len(self.geneBoundary)
    56         1            4      4.0      0.0          self.NE = []
    57        11           43      3.9      0.0          for g in range(self.NG):
    58        10           40      4.0      0.0              self.NE.append(len(self.geneBoundary[g]))
    59                                                   
    60         1          312    312.0      0.0          genomeIn = open(genomeFile, 'r')
    61         1            4      4.0      0.0          geneSeq = ''
    62       308         1381      4.5      0.0          for line in genomeIn:
    63       307         1014      3.3      0.0              if '>' not in line:
    64       306         1298      4.2      0.0                  geneSeq += line[:-1]
    65         1          187    187.0      0.0          genomeIn.close()
    66                                                   
    67                                                   #=======================================================================
    68                                                   # self.temp = []
    69                                                   # self.id = {}
    70                                                   # l = 0
    71                                                   # while l + self.K <= len(geneSeq):
    72                                                   #     self.temp.append(geneSeq[l:l+self.K])
    73                                                   #     self.id[geneSeq[l:l+self.K]] = l
    74                                                   #     l += 1
    75                                                   #=======================================================================
    76                                                   
    77        11           85      7.7      0.0          for g in range(self.NG):
    78        10          915     91.5      0.0              print('Gene-' + str(g) + ' processed...')
    79        87          307      3.5      0.0              for e in range(self.NE[g]):
    80        77          718      9.3      0.0                  id = str(g) + ',' + str(e) + ',' + str(e)
    81        77          406      5.3      0.0                  st = self.geneBoundary[g][e][0]
    82        77          332      4.3      0.0                  ed = self.geneBoundary[g][e][1] + 1
    83                                                           
    84        77          213      2.8      0.0                  l = st
    85     14251        47468      3.3      1.6                  while l + self.K <= ed:
    86     14174        53606      3.8      1.8                      kmer = geneSeq[l:l+self.K]
    87     14174        56532      4.0      1.9                      if kmer in self.kmerTable:
    88     12819       281499     22.0      9.2                          contribution = self.kmerContribution(st, ed, l, l + self.K, ed - st)
    89     12819        67997      5.3      2.2                          if id in self.kmerTable[kmer][1]:
    90                                                                       self.kmerTable[kmer][1][id] += contribution
    91                                                                   else:
    92     12819        44645      3.5      1.5                              self.kmerTable[kmer][1][id] = contribution
    93     14174        43852      3.1      1.4                      l += 1
    94                                                       
    95        77          335      4.4      0.0                  tot = (ed - st - self.readLength + 1) * (self.readLength - self.K + 1)
    96                                                               
    97        77          221      2.9      0.0                  l = st
    98     14251        47206      3.3      1.5                  while l + self.K <= ed:
    99     14174        52763      3.7      1.7                      kmer = geneSeq[l:l+self.K]
   100     14174        49319      3.5      1.6                      if kmer in self.kmerTable:
   101     12819        55802      4.4      1.8                          self.kmerTable[kmer][1][id] /= tot
   102     14174        44342      3.1      1.5                      l += 1
   103                                                               
   104        87          538      6.2      0.0              for ei in range(self.NE[g]):
   105       348         2156      6.2      0.1                  for ej in range(ei + 1, self.NE[g]):
   106       271         3598     13.3      0.1                      id = str(g) + ',' + str(ei) + ',' + str(ej)
   107       271         1345      5.0      0.0                      edi = self.geneBoundary[g][ei][1] + 1
   108       271         1124      4.1      0.0                      stj = self.geneBoundary[g][ej][0]
   109       271         2282      8.4      0.1                      junction = geneSeq[edi - self.readLength + 1:edi] + geneSeq[stj:stj + self.readLength - 1]
   110                                                               
   111       271          800      3.0      0.0                      l = 0
   112     36585       142755      3.9      4.7                      while l + self.K <= 2*self.readLength - 2:
   113     36314       139493      3.8      4.6                          kmer = junction[l:l + self.K]
   114     36314       140328      3.9      4.6                          if kmer in self.kmerTable:
   115     30950       711552     23.0     23.3                              contribution = self.kmerContribution(0, 2*self.readLength - 2, l, l + self.K, 2*self.readLength - 2)
   116     30950       151022      4.9      5.0                              if id in self.kmerTable[kmer][1]:
   117                                                                           self.kmerTable[kmer][1][id] += contribution 
   118                                                                       else:
   119     30950       121500      3.9      4.0                                  self.kmerTable[kmer][1][id] = contribution
   120     36314       114518      3.2      3.8                          l += 1
   121                                                                   
   122       271         1454      5.4      0.0                      tot = (2*self.readLength - 2 - self.readLength + 1) * (self.readLength - self.K + 1)
   123                                                                   
   124       271          789      2.9      0.0                      l = 0
   125     36585       139474      3.8      4.6                      while l + self.K <= 2*self.readLength - 2:
   126     36314       138174      3.8      4.5                          kmer = junction[l:l+self.K]
   127     36314       129507      3.6      4.2                          if kmer in self.kmerTable:
   128     30950       137484      4.4      4.5                              self.kmerTable[kmer][1][id] /= tot
   129     36314       114116      3.1      3.7                          l += 1
   130         1            3      3.0      0.0          return

Total time: 0.0881716 s
File: E:\Github\PSIEstimation\proj\src\KmerHash.py
Function: kmerContribution at line 132

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   132                                               @profile
   133                                               def kmerContribution(self, st, ed, l, r, L):
   134     43769       141045      3.2     41.0          cil = min(L - self.readLength + 1, self.readLength - self.K + 1)
   135     43769       113385      2.6     33.0          ret = min(l - st + 1, ed - r + 1)
   136     43769        89195      2.0     26.0          return min(ret, cil)

Total time: 0.161796 s
File: E:\Github\PSIEstimation\proj\src\KmerHash.py
Function: mergeKmer at line 138

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   138                                               @profile
   139                                               def mergeKmer(self):
   140         1            6      6.0      0.0          temp = {}
   141         1            6      6.0      0.0          newTable = {}
   142     13912        24652      1.8      3.9          for x in self.kmerTable:
   143     13911       276828     19.9     43.9              if not str(self.kmerTable[x]) in temp:
   144      8641       186152     21.5     29.5                  temp[str(self.kmerTable[x])] = x
   145      8641        23868      2.8      3.8                  newTable[x] = tuple(self.kmerTable[x])
   146                                                       else:
   147      5270        46886      8.9      7.4                  newx = temp[str(self.kmerTable[x])]
   148      5270         9378      1.8      1.5                  newdic = {}
   149     10563        20248      1.9      3.2                  for loc in newTable[newx][1]:
   150      5293        14229      2.7      2.3                      newdic[loc] = newTable[newx][1][loc] + self.kmerTable[x][1][loc]
   151      5270        11268      2.1      1.8                  newTable[newx] = (newTable[newx][0] + self.kmerTable[x][0],
   152      5270        10321      2.0      1.6                                    newdic)
   153                                                       
   154                                                   #=======================================================================
   155                                                   # for x in newTable:
   156                                                   #     if newTable[x] != self.kmerTable[x]:
   157                                                   #         print(x)
   158                                                   #         print(newTable[x])
   159                                                   #         print(self.kmerTable[x])
   160                                                   #=======================================================================
   161                                                               
   162                                                       
   163         1         6701   6701.0      1.1          self.kmerTable = newTable
   164         1           13     13.0      0.0          self.NW = len(self.kmerTable)
   165                                                   #exit()
   166         1            2      2.0      0.0          return 

Total time: 44.5206 s
File: SolverPipeline.py
Function: work at line 8

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                           @profile
     9                                           def work():
    10         1           11     11.0      0.0      timeSt = time.clock()
    11                                           
    12         1            4      4.0      0.0      exonBoundaryFile = r'../input/exonBoundary.bed'
    13         1            3      3.0      0.0      genomeFile = r'../input/genome.fa'
    14         1            3      3.0      0.0      readsFile = r'../input/reads.fq'
    15         1            3      3.0      0.0      K = 15
    16         1            3      3.0      0.0      readLength = 75
    17         1     57176967 57176967.0     33.0      kmerHasher = KmerHash(K, readLength, genomeFile, exonBoundaryFile, readsFile)
    18         1           39     39.0      0.0      print('Hashing Finished!')
    19         1           19     19.0      0.0      print('Total kmers: ' + str(len(kmerHasher.kmerTable)))
    20                                               #===============================================================================
    21                                               # for x in kmerHasher.temp:
    22                                               #     #print(x)
    23                                               #     print('#'+str(kmerHasher.id[x]), end = '\t')
    24                                               #     if x in kmerHasher.kmerTable:
    25                                               #         print(kmerHasher.kmerTable[x])
    26                                               #     else
    27                                               #         print('0')
    28                                               #===============================================================================
    29         1      4142524 4142524.0      2.4      solver = EMAlgorithm(kmerHasher)
    30         1           43     43.0      0.0      print('Start iteration')
    31         1    112182613 112182613.0     64.7      solver.work(10)
    32                                           
    33         1           22     22.0      0.0      print('\n======Model Solution==================')
    34                                               #print('Model\'s X')
    35                                               #print(solver.X)
    36         1            8      8.0      0.0      print('Model\'s Psi')
    37        11           34      3.1      0.0      for val in solver.Psi:
    38        10          422     42.2      0.0          print(val)
    39                                               #===============================================================================
    40                                               # print('\nConstraints')
    41                                               # print(solver.A[0].dot(solver.X[0].T))
    42                                               # print((solver.A[0].dot(solver.X[0].T) > -1e-15).all())
    43                                               # print(np.ones((1, solver.NX[0])).dot(solver.X[0].T))
    44                                               #===============================================================================
    45                                                
    46         1            9      9.0      0.0      print('\n======Ground Truth====================')
    47         1         2466   2466.0      0.0      GX = json.load(open('../kits/XGroundTruth.json', 'r'))
    48                                               #print('Ground Truth\'s X')
    49                                               #print(GX)
    50         1          653    653.0      0.0      GPsi = json.load(open('../kits/PsiGroundTruth.json', 'r'))  
    51         1           19     19.0      0.0      print('Ground Truth\'s Psi')
    52        11           35      3.2      0.0      for val in GPsi:
    53        10          234     23.4      0.0          print(val)
    54                                           
    55         1            9      9.0      0.0      print('\n======Evaluation============')
    56         1            8      8.0      0.0      print('RMSE:')
    57         1            3      3.0      0.0      mse = 0.0
    58         1            3      3.0      0.0      nmse = 0
    59        11           39      3.5      0.0      for g in range(solver.NG):
    60        87          266      3.1      0.0          for e in range(solver.NE[g]):
    61        77          352      4.6      0.0              mse += (solver.Psi[g][e] - GPsi[g][e]) ** 2
    62        77          236      3.1      0.0              nmse += 1
    63         1           46     46.0      0.0      print(np.sqrt(mse / nmse)) 
    64         1           24     24.0      0.0      print('Time: ' + str(time.clock() - timeSt) + 's')

